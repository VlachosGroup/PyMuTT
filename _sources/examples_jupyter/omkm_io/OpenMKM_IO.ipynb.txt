{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OpenMKM Input and Output\n",
    "This notebook describes pmutt's functionality to read and write OpenMKM CTI files. We will use the NH3 formation mechanism as a case study.\n",
    "\n",
    "## Topics Covered\n",
    "- Read species *ab-initio* data, reactions, lateral interactions and phases from a spreadsheet\n",
    "- Write the CTI file that can be read by OpenMKM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Input Spreadsheet\n",
    "All the data will be imported from the [`./inputs/NH3_Input_data.xlsx`](https://github.com/VlachosGroup/pmutt/blob/master/docs/source/examples_jupyter/openmkm_io/inputs/NH3_Input_Data.xlsx) file. There are five sheets:\n",
    "1. `refs` contains *ab-initio* and experimental data for a handful of gas species to calculate references\n",
    "2. `species` contains *ab-initio* data for each specie\n",
    "3. `reactions` contains elementary steps\n",
    "4. `phases` contains phases for the species\n",
    "5. `lateral_interactions` contains lateral interactions between species\n",
    "\n",
    "The contents are displayed below:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**References**\n",
    "\n",
    "| name | elements.N | elements.H | elements.Ru | T_ref  | HoRT_ref     | potentialenergy | symmetrynumber | statmech_model | atoms         | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber |\n",
    "|------|------------|------------|-------------|--------|--------------|-----------------|----------------|----------------|---------------|----------------|----------------|----------------|----------------|\n",
    "| N2   | 2          | 0          | 0           | 298.15 | 0            | -16.63          | 2              | IdealGas       | ./N2/CONTCAR  | 2744           |\n",
    "| NH3  | 1          | 3          | 0           | 298.15 | -18.38025311 | -19.54          | 3              | IdealGas       | ./NH3/CONTCAR | 3534           | 3464           | 1765           | 1139           |\n",
    "| H2   | 0          | 2          | 0           | 298.15 | 0            | -6.7700         | 2              | IdealGas       | ./H2/CONTCAR  | 4342           |\n",
    "| Ru   | 0          | 0          | 1           | 298.15 | 0.0000       |                 |                | Placeholder    |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Species**\n",
    "\n",
    "| name       | elements.N | elements.H | elements.Ru | phase   | statmech_model | symmetrynumber | atoms         | potentialenergy | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber | vib_wavenumber |\n",
    "|------------|------------|------------|-------------|---------|----------------|----------------|---------------|-----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|\n",
    "| N2         | 2          |            |             | gas     | IdealGas       | 2              | ./N2/CONTCAR  | -16.63          | 2744.00        |                |                |                |                |                |                |                |                |                |                |                |\n",
    "| NH3        | 1          | 3          |             | gas     | IdealGas       | 3              | ./NH3/CONTCAR | -19.54          | 3534.00        | 3464.00        | 1765.00        | 1139.00        |                |                |                |                |                |                |                |                |\n",
    "| H2         |            | 2          |             | gas     | IdealGas       | 2              | ./H2/CONTCAR  | -6.77           | 4342.00        |                |                |                |                |                |                |                |                |                |                |                |\n",
    "| N2(S)      | 2          |            |             | terrace | Harmonic       |                |               | -17.24          | 2197.19        | 360.42         | 347.34         | 335.67         | 62.08          | 32.18          |                |                |                |                |                |                |\n",
    "| N(S)       | 1          |            |             | terrace | Harmonic       |                |               | -9.34           | 549.11         | 538.56         | 504.32         | 475.81         | 459.08         | 410.02         |                |                |                |                |                |                |\n",
    "| H(S)       |            | 1          |             | terrace | Harmonic       |                |               | -4.00           | 1003.51        | 625.55         | 616.29         |                |                |                |                |                |                |                |                |                |\n",
    "| NH3(S)     | 1          | 3          |             | terrace | Harmonic       |                |               | -20.43          | 3491.09        | 3488.82        | 3364.52        | 1583.52        | 1582.07        | 1124.22        | 570.21         | 567.22         | 333.09         | 122.86         | 83.83          | 70.63          |\n",
    "| NH2(S)     | 1          | 2          |             | terrace | Harmonic       |                |               | -16.59          | 3469.30        | 3381.05        | 1503.02        | 698.87         | 625.60         | 615.94         | 475.13         | 298.12         | 153.25         |                |                |                |\n",
    "| NH(S)      | 1          | 1          |             | terrace | Harmonic       |                |               | -13.21          | 3403.13        | 718.18         | 710.58         | 528.53         | 415.20         | 410.13         |                |                |                |                |                |                |\n",
    "| TS1_NH3(S) | 1          | 3          |             |         | Harmonic       |                |               | -19.24          | 3453.41        | 3355.67        | 1723.85        | 1487.95        | 959.15         | 888.95         | 594.09         | 428.43         | 227.03         | 206.05         | 142.14         |                |\n",
    "| TS2_NH2(S) | 1          | 2          |             |         | Harmonic       |                |               | -15.87          | 3426.44        | 1293.72        | 922.83         | 660.97         | 525.60         | 496.84         | 330.67         | 290.28         |                |                |                |                |\n",
    "| TS3_NH(S)  | 1          | 1          |             |         | Harmonic       |                |               | -11.93          | 1201.60        | 491.57         | 462.02         | 402.16         | 242.14         |                |                |                |                |                |                |                |\n",
    "| TS4_N2(S)  | 2          |            |             |         | Harmonic       |                |               | -14.67          | 485.61         | 392.98         | 386.19         | 280.94         | 168.43         |                |                |                |                |                |                |                |\n",
    "| RU(S)      |            |            | 1           | terrace | Placeholder    |                |               |                 |                |                |                |                |                |                |                |                |                |                |                |                |\n",
    "| RU(B)      |            |            | 1           | bulk    | Placeholder    |                |               |                 |                |                |                |                |                |                |                |                |                |                |                |                |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Phases**\n",
    "\n",
    "| name    | phase_type           | density | site_density | reactions | interactions | list.phases | list.phases | note     |\n",
    "|---------|----------------------|---------|--------------|-----------|--------------|-------------|-------------|----------|\n",
    "| gas     | IdealGas             |         |              |           |              |             |             |          |\n",
    "| bulk    | StoichSolid          | 12.4    |              |           |              |             |             | Ru Metal |\n",
    "| terrace | InteractingInterface |         | 2.17E-09     | all       | all          | gas         | bulk        | Ru(0001) |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Reactions**\n",
    "\n",
    "| reaction_str                                        | is_adsorption |\n",
    "|-----------------------------------------------------|---------------|\n",
    "| H2 + 2RU(S) = 2H(S) + 2RU(B)                        | TRUE          |\n",
    "| N2 + RU(S)  = N2(S) + RU(B)                         | TRUE          |\n",
    "| NH3 + RU(S) = NH3(S) + RU(B)                        | TRUE          |\n",
    "| NH3(S) + RU(S)= TS1_NH3(S) = NH2(S) + H(S) + RU(B)  | FALSE         |\n",
    "| NH2(S) + RU(S) = TS2_NH2(S) = NH(S)  + H(S) + RU(B) | FALSE         |\n",
    "| NH(S)  + RU(S) = TS3_NH(S) = N(S)   + H(S) + RU(B)  | FALSE         |\n",
    "| 2N(S) + RU(B) = TS4_N2(S) = N2(S)  +  RU(S)         | FALSE         |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lateral Interactions**\n",
    "\n",
    "| name_i | name_j | list.intervals | list.slopes |\n",
    "|--------|--------|----------------|-------------|\n",
    "| N(S)   | N(S)   | 0              | -52.6       |\n",
    "| N(S)   | H(S)   | 0              | -17.7       |\n",
    "| H(S)   | N(S)   | 0              | -17.7       |\n",
    "| H(S)   | H(S)   | 0              | -3          |\n",
    "| NH2(S) | N(S)   | 0              | -20.7       |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Designate Units\n",
    "First, we will designate the units to write the CTI file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmutt.omkm.units import Units\n",
    "\n",
    "units = Units(length='cm', quantity='mol', act_energy='kcal/mol', mass='g', energy='kcal/mol')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading data\n",
    "Before we can initialize our species, we need the references.\n",
    "\n",
    "### Reading References\n",
    "We will open the [input spreadsheet](https://github.com/VlachosGroup/pmutt/blob/master/docs/source/examples_jupyter/openmkm_io/inputs/NH3_Input_Data.xlsx) and read the `refs` sheet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "from pmutt.io.excel import read_excel\n",
    "from pmutt.empirical.references import Reference, References\n",
    "\n",
    "# Find the location of Jupyter notebook\n",
    "# Note that normally Python scripts have a __file__ variable but Jupyter notebook doesn't.\n",
    "# Using pathlib can overcome this limiation\n",
    "notebook_path = Path().resolve()\n",
    "os.chdir(notebook_path)\n",
    "input_path = './inputs/NH3_Input_Data.xlsx'\n",
    "\n",
    "refs_data = read_excel(io=input_path, sheet_name='refs')\n",
    "refs = [Reference(**ref_data) for ref_data in refs_data]\n",
    "refs = References(references=refs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading Species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jonat\\AppData\\Roaming\\Python\\Python36\\site-packages\\scipy\\stats\\stats.py:1025: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  return a.std(axis) / a.mean(axis)\n"
     ]
    }
   ],
   "source": [
    "from pmutt.empirical.nasa import Nasa\n",
    "\n",
    "# Lower and higher temperatures\n",
    "T_low = 298. # K\n",
    "T_high = 800. # K\n",
    "\n",
    "species_data = read_excel(io=input_path, sheet_name='species')\n",
    "species = []\n",
    "species_phases = {}\n",
    "for ind_species_data in species_data:\n",
    "    # Initialize NASA from statistical mechanical data\n",
    "    ind_species = Nasa.from_model(T_low=T_low, T_high=T_high, references=refs, **ind_species_data)\n",
    "    species.append(ind_species)\n",
    "\n",
    "    # Group the species by phase for later use\n",
    "    try:\n",
    "        species_phases[ind_species.phase].append(ind_species)\n",
    "    except KeyError:\n",
    "        species_phases[ind_species.phase] = [ind_species]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading Phases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmutt.omkm.phase import IdealGas, InteractingInterface, StoichSolid\n",
    "\n",
    "phases_data = read_excel(io=input_path, sheet_name='phases')\n",
    "# We store the phases as a dictionary here instead of a list for the following section\n",
    "phases_dict = {}\n",
    "for phase_data in phases_data:\n",
    "    # Pre-processing relevant data\n",
    "    phase_name = phase_data['name']\n",
    "    phase_type = phase_data.pop('phase_type')\n",
    "    phase_data['species'] = species_phases[phase_name]\n",
    "    \n",
    "    # Create the appropriate object\n",
    "    if phase_type == 'IdealGas':\n",
    "        phase = IdealGas(**phase_data)\n",
    "    elif phase_type == 'StoichSolid':\n",
    "        phase = StoichSolid(**phase_data)\n",
    "    elif phase_type == 'InteractingInterface':\n",
    "        phase = InteractingInterface(**phase_data)\n",
    "    phases_dict[phase.name] = phase\n",
    "    \n",
    "# Convert phases_dict to list for write_cti\n",
    "phases = list(phases_dict.values())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assign Phases to InteractingInterface\n",
    "One attribute required by `InteractingInterface` are the phases it interacts with. The following code will assign the relevant phases to any `InteractingInterface` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "for name, phase in phases_dict.items():\n",
    "    # Skips object if phases is not as an attribute\n",
    "    try:\n",
    "        req_phase_names = phase.phases\n",
    "    except AttributeError:\n",
    "        continue\n",
    "\n",
    "    # If the object has a phases attribute, assign them based on the name\n",
    "    phases_objs = []\n",
    "    for req_phase_name in req_phase_names:\n",
    "        phases_objs.append(phases_dict[req_phase_name])\n",
    "    phase.phases = phases_objs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read reactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmutt import pmutt_list_to_dict\n",
    "from pmutt.omkm.reaction import SurfaceReaction\n",
    "\n",
    "# Convert species to dictionary for easier reaction assignment\n",
    "species_dict = pmutt_list_to_dict(species)\n",
    "reactions_data = read_excel(io=input_path, sheet_name='reactions')\n",
    "reactions = []\n",
    "for reaction_data in reactions_data:\n",
    "    reaction = SurfaceReaction.from_string(species=species_dict,\n",
    "                                           **reaction_data)\n",
    "    reactions.append(reaction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read lateral interactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmutt.mixture.cov import PiecewiseCovEffect\n",
    "\n",
    "interactions = []\n",
    "interactions_data = read_excel(io=input_path, sheet_name='lateral_interactions')\n",
    "for interaction_data in interactions_data:\n",
    "    interaction = PiecewiseCovEffect(**interaction_data)\n",
    "    interactions.append(interaction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Write CTI File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmutt.io.omkm import write_cti\n",
    "\n",
    "output_path = './outputs/cti.out'\n",
    "use_motz_wise = True\n",
    "\n",
    "write_cti(reactions=reactions, species=species, phases=phases, units=units,\n",
    "          lateral_interactions=interactions, filename=output_path,\n",
    "          use_motz_wise=use_motz_wise)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Output CTI File\n",
    "The CTI file produced is shown below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "# File generated by pmutt on 2019-08-19 09:44:11.417553\n",
    "\n",
    "#--------------------------------------------------------------------------------\n",
    "# UNITS\n",
    "#--------------------------------------------------------------------------------\n",
    "units(length=\"cm\", time=\"s\", quantity=\"mol\", energy=\"kcal/mol\",\n",
    "      act_energy=\"kcal/mol\", pressure=\"bar\", mass=\"g\")\n",
    "\n",
    "#--------------------------------------------------------------------------------\n",
    "# PHASES\n",
    "#--------------------------------------------------------------------------------\n",
    "ideal_gas(name=\"gas\",\n",
    "          elements=\"H N\",\n",
    "          species=\"N2 NH3 H2\")\n",
    "\n",
    "stoichiometric_solid(name=\"bulk\",\n",
    "                     elements=\"Ru\",\n",
    "                     species=\"RU(B)\",\n",
    "                     density=12.4,\n",
    "                     note=\"Ru Metal\")\n",
    "\n",
    "interacting_interface(name=\"terrace\",\n",
    "                      elements=\"Ru H N\",\n",
    "                      species=\"N2(S) N(S) H(S) NH3(S) NH2(S) NH(S) RU(S)\",\n",
    "                      phases=\"gas bulk\",\n",
    "                      site_density=2.1671e-09,\n",
    "                      note=\"Ru(0001)\",\n",
    "                      interactions=\"all\",\n",
    "                      reactions=\"all\")\n",
    "\n",
    "\n",
    "#--------------------------------------------------------------------------------\n",
    "# SPECIES\n",
    "#--------------------------------------------------------------------------------\n",
    "species(name=\"N2\", atoms=\"N:2\",\n",
    "        thermo=(NASA([298.0, 523.3877551020408],\n",
    "                     [ 3.41792195E+00,  8.91688129E-04, -3.46864753E-06,\n",
    "                       5.44691795E-09, -2.46804017E-12, -1.27217456E+02,\n",
    "                       3.46925670E+00]),\n",
    "                NASA([523.3877551020408, 800.0], \n",
    "                     [ 3.75207309E+00, -1.30159027E-03,  1.83848785E-06,\n",
    "                      -1.17413430E-10, -3.65391117E-13, -1.67464905E+02,\n",
    "                       2.02487460E+00])))\n",
    "\n",
    "species(name=\"NH3\", atoms=\"N:1 H:3\",\n",
    "        thermo=(NASA([298.0, 533.6326530612245],\n",
    "                     [ 4.57124680E+00, -6.89724277E-03,  2.70972941E-05,\n",
    "                      -3.44331645E-08,  1.62568430E-11, -8.53630325E+03,\n",
    "                      -1.78236359E+00]),\n",
    "                NASA([533.6326530612245, 800.0], \n",
    "                     [ 3.29427463E+00,  2.57481517E-03,  5.20883059E-07,\n",
    "                      -1.00678313E-09,  3.59356180E-13, -8.39739662E+03,\n",
    "                       3.59518301E+00])))\n",
    "\n",
    "species(name=\"H2\", atoms=\"H:2\",\n",
    "        thermo=(NASA([298.0, 574.6122448979592],\n",
    "                     [ 3.50717925E+00, -8.50397135E-05,  3.79570576E-07,\n",
    "                      -7.57943298E-10,  5.72423558E-13,  1.68725520E+03,\n",
    "                      -4.30359617E+00]),\n",
    "                NASA([574.6122448979592, 800.0], \n",
    "                     [ 3.37903251E+00,  7.92301907E-04, -1.88662952E-06,\n",
    "                       1.85974220E-09, -5.68447254E-13,  1.70231785E+03,\n",
    "                      -3.75384879E+00])))\n",
    "\n",
    "species(name=\"N2(S)\", atoms=\"N:2\",\n",
    "        thermo=(NASA([298.0, 482.40816326530614],\n",
    "                     [ 4.40553502E-01,  2.97759950E-02, -8.47698148E-05,\n",
    "                       1.16195177E-07, -6.12938589E-11, -6.81726811E+03,\n",
    "                      -1.67561821E+00]),\n",
    "                NASA([482.40816326530614, 800.0], \n",
    "                     [ 3.42605836E+00,  5.03710708E-03, -6.92689694E-06,\n",
    "                       6.03246113E-09, -2.18862675E-12, -7.10922368E+03,\n",
    "                      -1.39236755E+01])))\n",
    "\n",
    "species(name=\"N(S)\", atoms=\"N:1\",\n",
    "        thermo=(NASA([298.0, 502.8979591836735],\n",
    "                     [-5.23174593E+00,  6.11537184E-02, -1.47762309E-04,\n",
    "                       1.74618161E-07, -8.21997526E-11, -1.05502378E+04,\n",
    "                       1.88654280E+01]),\n",
    "                NASA([502.8979591836735, 800.0], \n",
    "                     [-8.29107669E-01,  2.64469843E-02, -4.38832016E-05,\n",
    "                       3.47600781E-08, -1.07819310E-11, -1.10025913E+04,\n",
    "                       5.84749603E-01])))\n",
    "\n",
    "species(name=\"H(S)\", atoms=\"H:1\",\n",
    "        thermo=(NASA([298.0, 461.9183673469388],\n",
    "                     [-1.41307531E+00,  1.00687718E-02,  1.09758988E-06,\n",
    "                      -2.55216914E-08,  2.17566538E-11, -6.12970520E+03,\n",
    "                       5.64702945E+00]),\n",
    "                NASA([461.9183673469388, 800.0], \n",
    "                     [-2.11302416E+00,  1.72572991E-02, -2.60046478E-05,\n",
    "                       1.92388088E-08, -5.68363784E-12, -6.07693323E+03,\n",
    "                       8.35415551E+00])))\n",
    "\n",
    "species(name=\"NH3(S)\", atoms=\"N:1 H:3\",\n",
    "        thermo=(NASA([298.0, 461.9183673469388],\n",
    "                     [ 1.16759533E+00,  2.05732170E-02, -3.66958772E-05,\n",
    "                       4.56112325E-08, -2.49628744E-11, -1.42313136E+04,\n",
    "                      -4.80541265E+00]),\n",
    "                NASA([461.9183673469388, 800.0], \n",
    "                     [ 1.58312977E+00,  1.57753291E-02, -1.71587153E-05,\n",
    "                       1.15414255E-08, -3.21958978E-12, -1.42569335E+04,\n",
    "                      -6.35113154E+00])))\n",
    "\n",
    "species(name=\"NH2(S)\", atoms=\"N:1 H:2\",\n",
    "        thermo=(NASA([298.0, 523.3877551020408],\n",
    "                     [-2.56305506E+00,  3.84726874E-02, -7.73503504E-05,\n",
    "                       8.09903199E-08, -3.43595838E-11, -1.17458710E+04,\n",
    "                       8.90805309E+00]),\n",
    "                NASA([523.3877551020408, 800.0], \n",
    "                     [-6.86530719E-01,  2.43298826E-02, -3.68705157E-05,\n",
    "                       2.88483783E-08, -8.86963660E-12, -1.19475429E+04,\n",
    "                       1.03190122E+00])))\n",
    "\n",
    "species(name=\"NH(S)\", atoms=\"N:1 H:1\",\n",
    "        thermo=(NASA([298.0, 543.8775510204082],\n",
    "                     [-3.73687435E+00,  4.05226889E-02, -8.44226964E-05,\n",
    "                       8.65932632E-08, -3.53036247E-11, -1.46202194E+04,\n",
    "                       1.37781593E+01]),\n",
    "                NASA([543.8775510204082, 800.0], \n",
    "                     [-1.33660645E+00,  2.33106600E-02, -3.77180253E-05,\n",
    "                       2.97486446E-08, -9.12157176E-12, -1.48903408E+04,\n",
    "                       3.58875312E+00])))\n",
    "\n",
    "species(name=\"TS1_NH3(S)\", atoms=\"N:1 H:3\",\n",
    "        thermo=(NASA([298.0, 451.67346938775506],\n",
    "                     [ 4.96418515E-02,  2.15674671E-02, -2.75604959E-05,\n",
    "                       2.23225323E-08, -8.79255935E-12, -2.50477082E+03,\n",
    "                      -1.46494399E+00]),\n",
    "                NASA([451.67346938775506, 800.0], \n",
    "                     [ 5.21221040E-02,  2.11615812E-02, -2.49542203E-05,\n",
    "                       1.66204937E-08, -4.59897868E-12, -2.50097843E+03,\n",
    "                      -1.43112446E+00])))\n",
    "\n",
    "species(name=\"TS2_NH2(S)\", atoms=\"N:1 H:2\",\n",
    "        thermo=(NASA([298.0, 554.1224489795918],\n",
    "                     [-2.58881424E+00,  3.43781302E-02, -5.87419101E-05,\n",
    "                       5.18321984E-08, -1.87340797E-11, -5.75828318E+03,\n",
    "                       8.95651586E+00]),\n",
    "                NASA([554.1224489795918, 800.0], \n",
    "                     [-1.48538501E+00,  2.67287608E-02, -3.86606417E-05,\n",
    "                       2.81558194E-08, -8.15140597E-12, -5.88676384E+03,\n",
    "                       4.23478568E+00])))\n",
    "\n",
    "species(name=\"TS3_NH(S)\", atoms=\"N:1 H:1\",\n",
    "        thermo=(NASA([298.0, 482.40816326530614],\n",
    "                     [-1.80701218E+00,  3.07479132E-02, -6.96816870E-05,\n",
    "                       8.30020912E-08, -4.08170225E-11, -2.37130921E+03,\n",
    "                       5.69757432E+00]),\n",
    "                NASA([482.40816326530614, 800.0], \n",
    "                     [-1.24242592E-01,  1.65859456E-02, -2.43704704E-05,\n",
    "                       1.77594067E-08, -5.19878424E-12, -2.53360814E+03,\n",
    "                      -1.18117850E+00])))\n",
    "\n",
    "species(name=\"TS4_N2(S)\", atoms=\"N:2\",\n",
    "        thermo=(NASA([298.0, 482.40816326530614],\n",
    "                     [-1.75107618E+00,  4.12189598E-02, -1.09828935E-04,\n",
    "                       1.41320046E-07, -7.17404084E-11,  2.18954964E+04,\n",
    "                       4.82355594E+00]),\n",
    "                NASA([482.40816326530614, 800.0], \n",
    "                     [ 1.52431744E+00,  1.40315985E-02, -2.40821843E-05,\n",
    "                       1.96281604E-08, -6.24114074E-12,  2.15755109E+04,\n",
    "                      -8.60931129E+00])))\n",
    "\n",
    "species(name=\"RU(S)\", atoms=\"Ru:1\",\n",
    "        thermo=(NASA([298.0, 554.1224489795918],\n",
    "                     [ 0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00]),\n",
    "                NASA([554.1224489795918, 800.0], \n",
    "                     [ 0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00])))\n",
    "\n",
    "species(name=\"RU(B)\", atoms=\"Ru:1\",\n",
    "        thermo=(NASA([298.0, 554.1224489795918],\n",
    "                     [ 0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00]),\n",
    "                NASA([554.1224489795918, 800.0], \n",
    "                     [ 0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00,  0.00000000E+00,  0.00000000E+00,\n",
    "                       0.00000000E+00])))\n",
    "\n",
    "\n",
    "#--------------------------------------------------------------------------------\n",
    "# LATERAL INTERACTIONS\n",
    "#--------------------------------------------------------------------------------\n",
    "lateral_interaction(\"N(S) N(S)\", [-52.6], [0])\n",
    "lateral_interaction(\"N(S) H(S)\", [-17.7], [0])\n",
    "lateral_interaction(\"H(S) N(S)\", [-17.7], [0])\n",
    "lateral_interaction(\"H(S) H(S)\", [-3.], [0])\n",
    "lateral_interaction(\"NH2(S) N(S)\", [-20.7], [0])\n",
    "\n",
    "#--------------------------------------------------------------------------------\n",
    "# REACTION OPTIONS\n",
    "#--------------------------------------------------------------------------------\n",
    "enable_motz_wise()\n",
    "\n",
    "\n",
    "#--------------------------------------------------------------------------------\n",
    "# REACTIONS\n",
    "#--------------------------------------------------------------------------------\n",
    "surface_reaction(\"H2 + 2 RU(S) <=> 2 H(S) + 2 RU(B)\", stick( 5.00000e-01, 1,  0.00000e+00))\n",
    "surface_reaction(\"N2 + RU(S) <=> N2(S) + RU(B)\", stick( 5.00000e-01, 1,  0.00000e+00))\n",
    "surface_reaction(\"NH3 + RU(S) <=> NH3(S) + RU(B)\", stick( 5.00000e-01, 1,  0.00000e+00))\n",
    "surface_reaction(\"NH3(S) + RU(S) <=> NH2(S) + H(S) + RU(B)\", [ 9.61497e+18, 1,  2.42941e+01])\n",
    "surface_reaction(\"NH2(S) + RU(S) <=> NH(S) + H(S) + RU(B)\", [ 9.61497e+18, 1,  1.21743e+01])\n",
    "surface_reaction(\"NH(S) + RU(S) <=> N(S) + H(S) + RU(B)\", [ 9.61497e+18, 1,  2.44974e+01])\n",
    "surface_reaction(\"2 N(S) + RU(B) <=> N2(S) + RU(S)\", [ 9.61497e+18, 1,  8.64724e+01])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
