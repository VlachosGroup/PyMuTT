{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Chemkin Input and Output\n",
    "This notebook describes pMuTT's functionality to read and write Chemkin files. We will use the NH3 formation mechanism as a case study.\n",
    "\n",
    "## Topics Covered\n",
    "- Read species *ab-initio* data, reactions, and catalyst sites from a spreadsheet\n",
    "- Write the thermdat, gas.inp, surf.inp, T_flow.inp, EAg.inp, EAs.inp, tube_mole.inp files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Input Spreadsheet\n",
    "All the data will be imported from the `NH3_Input_data.xlsx` file. There are four sheets:\n",
    "1. `cat_sites` contains catalyst site properties for the adsorbed species\n",
    "2. `refs` contains *ab-initio* and experimental data for a handful of gas species to calculate references\n",
    "3. `species` contains *ab-initio* data for each specie\n",
    "4. `reactions` contains elementary steps\n",
    "\n",
    "The contents are displayed below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading data\n",
    "Before we can initialize our species, we need the catalytic sites and the references.\n",
    "\n",
    "### Reading Catalytic Sites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'bulk_specie': 'RU(B)',\n",
      " 'class': \"<class 'pMuTT.chemkin.CatSite'>\",\n",
      " 'density': 12.2,\n",
      " 'name': 'RU0001',\n",
      " 'site_density': 2.1671e-09}\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from pprint import pprint\n",
    "from pathlib import Path\n",
    "from pMuTT.io_.excel import read_excel\n",
    "from pMuTT.chemkin import CatSite\n",
    "\n",
    "# Find the location of Jupyter notebook\n",
    "# Note that normally Python scripts have a __file__ variable but Jupyter notebook doesn't.\n",
    "# Using pathlib can overcome this limiation\n",
    "notebook_path = Path().resolve()\n",
    "os.chdir(notebook_path)\n",
    "excel_path = 'NH3_Input_data.xlsx'\n",
    "\n",
    "cat_site_data = read_excel(io=excel_path, sheet_name='cat_sites')[0]\n",
    "cat_site = CatSite(**cat_site_data)\n",
    "\n",
    "# Print the properties of the catalyst site\n",
    "pprint(cat_site.to_dict())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading reference species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'H': -129.34222830159834, 'N': -320.10077207763885}\n"
     ]
    }
   ],
   "source": [
    "from pMuTT.empirical.references import Reference, References\n",
    "\n",
    "references_data = read_excel(io=excel_path, sheet_name='refs')\n",
    "\n",
    "# Convert data to Reference objects and put them in a list\n",
    "refs_list = [Reference(**ref_data) for ref_data in references_data]\n",
    "\n",
    "# Assign the Reference objects to a References object so offsets can be calculated\n",
    "refs = References(references=refs_list)\n",
    "\n",
    "# Print out the offsets calculated\n",
    "print(refs.offset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jonat\\AppData\\Roaming\\Python\\Python36\\site-packages\\scipy\\stats\\stats.py:1025: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  return a.std(axis) / a.mean(axis)\n"
     ]
    }
   ],
   "source": [
    "from pMuTT.empirical.nasa import Nasa\n",
    "\n",
    "# Range of data to fit the Nasa polynomials\n",
    "T_low = 298. # K\n",
    "T_high = 800. # K\n",
    "\n",
    "species_data = read_excel(io=excel_path, sheet_name='species')\n",
    "species = []\n",
    "for specie_data in species_data:\n",
    "    specie = Nasa.from_statmech(T_low=T_low, T_high=T_high, references=refs, **specie_data)\n",
    "    # If the species is a surface species, assign the catalyst site specified above\n",
    "    if specie.phase.lower() == 's':\n",
    "        specie.cat_site = cat_site\n",
    "        specie.n_sites = 1\n",
    "    species.append(specie)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading reactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pMuTT import pMuTT_list_to_dict\n",
    "from pMuTT.reaction import ChemkinReaction, Reactions\n",
    "\n",
    "# Convert list of Nasa polynomials to dictionary of Nasa polynomials\n",
    "species_dict = pMuTT_list_to_dict(species)\n",
    "\n",
    "reactions_data = read_excel(io=excel_path, sheet_name='reactions')\n",
    "reactions_list = []\n",
    "for reaction_data in reactions_data:\n",
    "    reaction = ChemkinReaction.from_string(species=species_dict, **reaction_data)\n",
    "    reactions_list.append(reaction)\n",
    "reactions = Reactions(reactions=reactions_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Writing Chemkin files\n",
    "Now that we have all the required objects, we can write the output files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Writing thermdat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pMuTT.io_.thermdat import write_thermdat\n",
    "\n",
    "write_thermdat(filename='thermdat', nasa_species=species)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Writing gas.inp and surf.inp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pMuTT.io_ import chemkin as ck_io\n",
    "\n",
    "ck_io.write_gas(filename='gas.inp', nasa_species=species, reactions=reactions, act_method_name='get_GoRT_act')\n",
    "ck_io.write_surf(filename='surf.inp', nasa_species=species, reactions=reactions, act_method_name='get_GoRT_act')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Writing T_flow.inp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Conditions used to write files\n",
    "T = [300., 400., 500.] # Temperature in K\n",
    "P = [1., 2., 3.] # Pressure in atm\n",
    "Q = [10., 20., 30.] # Standard volumetric flow rate in cm3\n",
    "abyv= [100., 50., 25.] # Catalyst surface area to reactor volume in 1/cm\n",
    "\n",
    "ck_io.write_T_flow(filename='T_flow.inp', T=T, P=P, Q=Q, abyv=abyv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Writing EAg.inp and EAs.inp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert T_flow inputs into list of dictionaries that can be used by write_EA.\n",
    "# In the future, this will be replaced by a function\n",
    "conditions = []\n",
    "for T_i, P_i, Q_i, abyv_i in zip(T, P, Q, abyv):\n",
    "    condition = {\n",
    "        'T': T_i,\n",
    "        'P': P_i,\n",
    "        'Q': Q_i,\n",
    "        'abyv': abyv}\n",
    "    conditions.append(condition)\n",
    "\n",
    "ck_io.write_EA(filename='EAs.inp',\n",
    "               reactions=reactions,\n",
    "               write_gas_phase=False,\n",
    "               act_method_name='get_GoRT_act',\n",
    "               conditions=conditions)\n",
    "ck_io.write_EA(filename='EAg.inp',\n",
    "               reactions=reactions,\n",
    "               write_gas_phase=True,\n",
    "               act_method_name='get_GoRT_act',\n",
    "               conditions=conditions)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
